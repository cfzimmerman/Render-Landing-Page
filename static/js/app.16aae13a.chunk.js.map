{"version":3,"sources":["src/resources/project/Environment.ts","src/resources/project/GlobalStyles.ts","src/resources/project/Colors.ts","src/resources/components/NavButtonBlock.tsx","src/resources/utils/IsActive.ts","src/redux/general.ts","src/resources/components/MobileOptionsModal.tsx","src/resources/components/NavBar.tsx","src/resources/backgroundContent.ts","src/resources/components/BlurViewButton.tsx","src/pages/LandingMain.tsx","src/pages/Contact.tsx","src/PageStack.tsx","src/redux/store.ts","App.tsx"],"names":["Dimensions","get","Environment","squareUnit","windowHeight","height","windowWidth","width","standardPadding","standardRadius","largePadding","smallPadding","fontSize","h1Size","h2Size","h3Size","h4Size","p1Size","p2Size","GlobalStyles","StyleSheet","create","shadow","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","textShadow","textShadowColor","textShadowRadius","textShadowOffset","h1","fontFamily","h2","h3","h4","p1","p2","Colors","Primary","Secondary","AccentOn","AcccentPartial","styles","navbuttonwrapper","marginHorizontal","buttonlabel","color","NavButtonBlock","title","active","Action","TouchableOpacity","onPress","hitSlop","top","bottom","left","right","View","style","Text","textDecorationLine","numberOfLines","adjustsFontSizeToFit","IsActive","buttonLabel","origin","slice","createSlice","name","initialState","navOptionsActive","reducers","setNavOptionsActive","state","action","payload","actions","blurviewwrapper","flex","container","alignItems","justifyContent","MobileOptionsModal","navigation","dispatch","useDispatch","useSelector","general","Modal","animationType","transparent","visible","onRequestClose","tint","TouchableWithoutFeedback","navigate","Linking","stroke","NavButtonHolder","windowDimensions","navbuttonholder","menuicon","NavLogo","navlogowrapper","Image","source","uri","navlogo","resizeMode","largenavlogowrapper","largenavlogo","flexDirection","margin","navbar","backgroundColor","borderRadius","padding","marginBottom","NavBar","intensity","backgroundContent","address","buttonwrapper","textAlign","BlurViewButton","accessibilityLabel","flatliststyle","position","paddingwrapper","headerwrapper","header","subheader","LandingMain","route","useState","index","setIndex","flatListRef","useRef","ChangeIndex","previousIndex","current","scrollToIndex","animated","useEffect","interval","setInterval","clearInterval","useWindowDimensions","FlatList","data","renderItem","item","ref","scrollEnabled","keyExtractor","showsVerticalScrollIndicator","getItemLayout","length","offset","window","open","backgroundwrapper","Contact","Stack","createNativeStackNavigator","PageStack","Navigator","screenOptions","headerShown","initialRouteName","Screen","component","options","animation","reducer","combineReducers","store","configureStore","App","useFonts","Inter_400Regular","Inter_500Medium","Inter_600SemiBold","NavigationContainer"],"mappings":"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","file":"static/js/app.16aae13a.chunk.js","sourcesContent":["import { Dimensions, useWindowDimensions } from \"react-native\";\n\nconst FormatNumber = (number: number) => {\n  const numString = number.toFixed(3);\n  return parseInt(numString);\n};\n\nconst { height: windowHeight, width: windowWidth } = Dimensions.get(\"window\");\n\nconst squareUnit = 24;\n\nconst standardPadding = squareUnit * 0.8;\n\nconst fontSize = {\n  h1Size: squareUnit * 2.5,\n  h2Size: standardPadding * 2,\n  h3Size: squareUnit * 1.2,\n  h4Size: standardPadding * 1.2,\n  p1Size: squareUnit,\n  p2Size: standardPadding * 0.8,\n};\n\nconst Environment = {\n  squareUnit,\n  windowHeight,\n  windowWidth,\n  standardPadding,\n  standardRadius: standardPadding,\n  largePadding: standardPadding * 2,\n  smallPadding: standardPadding / 2,\n  fontSize,\n};\n\nexport default Environment;\n","import { StyleSheet } from \"react-native\";\nimport Environment from \"./Environment\";\nimport {\n  useFonts,\n  Inter_400Regular,\n  Inter_500Medium,\n  Inter_600SemiBold,\n} from \"@expo-google-fonts/inter\";\n\nconst GlobalStyles = StyleSheet.create({\n  shadow: {\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 10,\n    },\n    shadowOpacity: 0.51,\n    shadowRadius: 13.16,\n    elevation: 20,\n  },\n  textShadow: {\n    textShadowColor: \"#00000050\",\n    textShadowRadius: 5,\n    textShadowOffset: { width: 2, height: 4 },\n  },\n  h1: {\n    fontSize: Environment.fontSize.h1Size,\n    fontFamily: \"Inter_600SemiBold\",\n  },\n  h2: {\n    fontSize: Environment.fontSize.h2Size,\n    fontFamily: \"Inter_500Medium\",\n  },\n  h3: {\n    fontSize: Environment.fontSize.h3Size,\n    fontFamily: \"Inter_400Regular\",\n  },\n  h4: {\n    fontSize: Environment.fontSize.h4Size,\n    fontFamily: \"Inter_500Medium\",\n  },\n  p1: {\n    fontSize: Environment.fontSize.p1Size,\n    fontFamily: \"Inter_500Medium\",\n  },\n  p2: {\n    fontSize: Environment.fontSize.p2Size,\n    fontFamily: \"Inter_400Regular\",\n  },\n});\n\nexport default GlobalStyles;\n","const Colors = {\n  Primary: \"#000028\",\n  Secondary: \"#111D40\",\n  AccentOn: \"#FFFFFF\",\n  AcccentPartial: \"#FFFFFF90\",\n};\n\nexport default Colors;\n","import { View, TouchableOpacity, Text, StyleSheet } from \"react-native\";\nimport { Environment, GlobalStyles, Colors } from \"../project\";\n\nexport interface NavButtonBlockPropTypes {\n  title: string;\n  active: boolean;\n  Action: Function;\n}\n\nconst NavButtonBlock = ({ title, active, Action }: NavButtonBlockPropTypes) => {\n  return (\n    <TouchableOpacity\n      onPress={() => Action()}\n      hitSlop={{\n        top: Environment.standardPadding,\n        bottom: Environment.standardPadding,\n        left: Environment.standardPadding,\n        right: Environment.standardPadding,\n      }}\n    >\n      <View style={styles.navbuttonwrapper}>\n        <Text\n          style={[\n            GlobalStyles.textShadow,\n            styles.buttonlabel,\n            {\n              textDecorationLine: active ? \"underline\" : \"none\",\n            },\n          ]}\n          numberOfLines={1}\n          adjustsFontSizeToFit\n        >\n          {title}\n        </Text>\n      </View>\n    </TouchableOpacity>\n  );\n};\n\nconst styles = StyleSheet.create({\n  navbuttonwrapper: {\n    marginHorizontal: Environment.standardPadding,\n  },\n  buttonlabel: {\n    color: Colors.Primary,\n    fontSize: 32,\n  },\n});\n\nexport default NavButtonBlock;\n","import { OriginTypes } from \"../components/NavBar\";\n\nconst IsActive = ({\n  buttonLabel,\n  origin,\n}: {\n  buttonLabel: OriginTypes;\n  origin: OriginTypes;\n}) => {\n  if (buttonLabel === origin) {\n    return true;\n  }\n  return false;\n};\n\nexport default IsActive;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nconst slice = createSlice({\n  name: \"general\",\n  initialState: {\n    navOptionsActive: false,\n  },\n  reducers: {\n    setNavOptionsActive: (state, action: PayloadAction<boolean>) => {\n      state.navOptionsActive = action.payload;\n    },\n  },\n});\n\nexport const { setNavOptionsActive } = slice.actions;\nexport default slice.reducer;\n","import {\n  View,\n  Text,\n  TouchableOpacity,\n  Modal,\n  StyleSheet,\n  TouchableWithoutFeedback,\n} from \"react-native\";\nimport { X } from \"react-native-feather\";\nimport * as Linking from \"expo-linking\";\nimport NavButtonBlock from \"./NavButtonBlock\";\nimport { BlurView } from \"expo-blur\";\nimport IsActive from \"../utils/IsActive\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Environment, Colors } from \"../project\";\nimport { RootStateType } from \"../../redux/store\";\nimport { setNavOptionsActive } from \"../../redux/general\";\nimport { OriginTypes } from \"./NavBar\";\n\nexport interface MobileOptionsModalPropTypes {\n  navigation: any;\n}\n\n// NEXT: Turn buttons into an exported component. Import for use here.\n\nconst MobileOptionsModal = ({\n  origin,\n  navigation,\n}: {\n  origin: OriginTypes;\n  navigation: any;\n}) => {\n  const dispatch = useDispatch();\n  const navOptionsActive = useSelector(\n    (state: RootStateType) => state.general.navOptionsActive\n  );\n\n  return (\n    <Modal\n      animationType={\"fade\"}\n      transparent={true}\n      visible={navOptionsActive}\n      onRequestClose={() => dispatch(setNavOptionsActive(false))}\n    >\n      <BlurView tint={\"light\"} style={styles.blurviewwrapper}>\n        <TouchableWithoutFeedback\n          onPress={() => dispatch(setNavOptionsActive(false))}\n        >\n          <View style={styles.container}>\n            <View style={styles.navbuttonwrapper}>\n              <NavButtonBlock\n                title={\"Home\"}\n                active={IsActive({ buttonLabel: \"Home\", origin })}\n                Action={() => {\n                  navigation.navigate(\"LandingMain\");\n                  dispatch(setNavOptionsActive(false));\n                }}\n              />\n              <NavButtonBlock\n                title={\"Contact\"}\n                active={IsActive({ buttonLabel: \"Contact\", origin })}\n                Action={() => {\n                  navigation.navigate(\"Contact\");\n                  dispatch(setNavOptionsActive(false));\n                }}\n              />\n              <NavButtonBlock\n                title={\"Log in\"}\n                active={false}\n                Action={() => Linking.openURL(\"https://youtu.be/dQw4w9WgXcQ\")}\n              />\n              <TouchableOpacity\n                onPress={() => dispatch(setNavOptionsActive(false))}\n              >\n                <X\n                  height={Environment.squareUnit * 1.75}\n                  width={Environment.squareUnit * 1.75}\n                  stroke={Colors.Primary}\n                />\n              </TouchableOpacity>\n            </View>\n          </View>\n        </TouchableWithoutFeedback>\n      </BlurView>\n    </Modal>\n  );\n};\n\nconst styles = StyleSheet.create({\n  blurviewwrapper: {\n    flex: 1,\n  },\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  navbuttonwrapper: {\n    height: \"40%\",\n    width: \"100%\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n  },\n});\n\nexport default MobileOptionsModal;\n","import { View, Image, Text, StyleSheet, TouchableOpacity } from \"react-native\";\nimport NavButtonBlock from \"./NavButtonBlock\";\nimport { Menu } from \"react-native-feather\";\nimport { BlurView } from \"expo-blur\";\nimport { setNavOptionsActive } from \"../../redux/general\";\nimport { Environment, GlobalStyles, Colors } from \"../project\";\nimport { WindowDimensionsType } from \"../../pages/LandingMain\";\nimport * as Linking from \"expo-linking\";\nimport IsActive from \"../utils/IsActive\";\nimport { DispatchType } from \"../../redux/store\";\n\nexport type OriginTypes = \"Home\" | \"Contact\";\n\ninterface NavButtonHolderProps {\n  windowDimensions: WindowDimensionsType;\n  dispatch: DispatchType;\n  origin: OriginTypes;\n  navigation: any;\n}\n\nconst NavButtonHolder = ({\n  windowDimensions,\n  dispatch,\n  origin,\n  navigation,\n}: NavButtonHolderProps) => {\n  if (windowDimensions.height / windowDimensions.width < 1) {\n    // Landscape\n    return (\n      <View style={styles.navbuttonholder}>\n        <NavButtonBlock\n          title={\"Home\"}\n          active={IsActive({ origin, buttonLabel: \"Home\" })}\n          Action={() => navigation.navigate(\"LandingMain\")}\n        />\n        <NavButtonBlock\n          title={\"Contact\"}\n          active={IsActive({ origin, buttonLabel: \"Contact\" })}\n          Action={() => navigation.navigate(\"Contact\")}\n        />\n        <NavButtonBlock\n          title={\"Log in\"}\n          active={false}\n          Action={() => Linking.openURL(\"https://youtu.be/dQw4w9WgXcQ\")}\n        />\n      </View>\n    );\n  } else {\n    return (\n      <TouchableOpacity onPress={() => dispatch(setNavOptionsActive(true))}>\n        <Menu\n          height={Environment.squareUnit * 1.75}\n          width={Environment.squareUnit * 1.75}\n          stroke={Colors.Primary}\n          style={styles.menuicon}\n        />\n      </TouchableOpacity>\n    );\n  }\n};\n\nconst NavLogo = ({\n  windowDimensions,\n  navigation,\n}: {\n  windowDimensions: WindowDimensionsType;\n  navigation: any;\n}) => {\n  if (windowDimensions.height / windowDimensions.width < 1) {\n    return (\n      <TouchableOpacity\n        onPress={() => navigation.navigate(\"LandingMain\")}\n        style={styles.navlogowrapper}\n      >\n        <Image\n          source={{\n            uri: \"https://mobile965f75596afb4ca68a1e637998665f92161112-production.s3.amazonaws.com/public/CompanyStock/LandingPage/LP-LongLogoDark.png\",\n          }}\n          style={styles.navlogo}\n          resizeMode=\"contain\"\n        />\n      </TouchableOpacity>\n    );\n  } else {\n    return (\n      <TouchableOpacity\n        onPress={() => navigation.navigate(\"LandingMain\")}\n        style={styles.largenavlogowrapper}\n      >\n        <Image\n          source={{\n            uri: \"https://mobile965f75596afb4ca68a1e637998665f92161112-production.s3.amazonaws.com/public/CompanyStock/LandingPage/LP-SingleLogo.png\",\n          }}\n          style={styles.largenavlogo}\n          resizeMode={\"contain\"}\n        />\n      </TouchableOpacity>\n    );\n  }\n};\n\ninterface NavBarPropTypes {\n  windowDimensions: WindowDimensionsType;\n  dispatch: DispatchType;\n  origin: OriginTypes;\n  navigation: any;\n}\n\nconst NavBar = ({\n  windowDimensions,\n  dispatch,\n  origin,\n  navigation,\n}: NavBarPropTypes) => {\n  return (\n    <BlurView intensity={80} style={[GlobalStyles.shadow, styles.navbar]}>\n      <NavLogo windowDimensions={windowDimensions} navigation={navigation} />\n      <NavButtonHolder\n        windowDimensions={windowDimensions}\n        dispatch={dispatch}\n        origin={origin}\n        navigation={navigation}\n      />\n    </BlurView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  navbuttonholder: {\n    flexDirection: \"row\",\n    justifyContent: \"flex-end\",\n  },\n  navlogowrapper: {\n    height: \"100%\",\n    width: \"20%\",\n  },\n  navlogo: {\n    height: \"100%\",\n    width: \"100%\",\n  },\n  largenavlogowrapper: {\n    height: \"80%\",\n    width: \"20%\",\n  },\n  largenavlogo: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n  menuicon: {\n    margin: Environment.standardPadding,\n  },\n  navbar: {\n    height: \"10%\",\n    width: \"100%\",\n    backgroundColor: \"#35fac5\",\n    borderRadius: Environment.standardRadius,\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    padding: \"0.75%\",\n    marginBottom: \"2%\",\n  },\n});\n\nexport default NavBar;\n","export interface BackgroundContentObject {\n  title: string;\n  address: string;\n}\n\nconst backgroundContent: BackgroundContentObject[] = [\n  {\n    title: \"Valheim\",\n    address:\n      \"https://mobile965f75596afb4ca68a1e637998665f92161112-production.s3.amazonaws.com/public/CompanyStock/LandingPage/LP-Valheim.jpg\",\n  },\n  {\n    title: \"Minecraft Sand\",\n    address:\n      \"https://mobile965f75596afb4ca68a1e637998665f92161112-production.s3.amazonaws.com/public/CompanyStock/LandingPage/LP-MC2.jpeg\",\n  },\n  {\n    title: \"Forza\",\n    address:\n      \"https://mobile965f75596afb4ca68a1e637998665f92161112-production.s3.amazonaws.com/public/CompanyStock/LandingPage/LP-Forza.jpeg\",\n  },\n  {\n    title: \"Animal Crossing: New Horizons\",\n    address:\n      \"https://mobile965f75596afb4ca68a1e637998665f92161112-production.s3.amazonaws.com/public/CompanyStock/LandingPage/LP-ACNH.JPG\",\n  },\n  {\n    title: \"Ghostwire: Tokyo\",\n    address:\n      \"https://mobile965f75596afb4ca68a1e637998665f92161112-production.s3.amazonaws.com/public/CompanyStock/LandingPage/LP-NaN.PNG\",\n  },\n  {\n    title: \"Breath of the Wild\",\n    address:\n      \"https://mobile965f75596afb4ca68a1e637998665f92161112-production.s3.amazonaws.com/public/CompanyStock/LandingPage/LP-BOTW2.JPG\",\n  },\n  {\n    title: \"Red Dead Redemption 2\",\n    address:\n      \"https://mobile965f75596afb4ca68a1e637998665f92161112-production.s3.amazonaws.com/public/CompanyStock/LandingPage/LP-RDR2.PNG\",\n  },\n  {\n    title: \"Skyrim\",\n    address:\n      \"https://mobile965f75596afb4ca68a1e637998665f92161112-production.s3.amazonaws.com/public/CompanyStock/LandingPage/LP-Skyrim.JPG\",\n  },\n  {\n    title: \"Minecraft Nether\",\n    address:\n      \"https://mobile965f75596afb4ca68a1e637998665f92161112-production.s3.amazonaws.com/public/CompanyStock/LandingPage/LP-MC.jpeg\",\n  },\n];\n\nexport default backgroundContent;\n","import { Text, TouchableOpacity, StyleSheet } from \"react-native\";\nimport { BlurView } from \"expo-blur\";\nimport { GlobalStyles, Environment, Colors } from \"../project\";\n\nconst BlurViewButton = ({\n  Action,\n  title,\n  accessibilityLabel,\n}: {\n  Action: Function;\n  title: string;\n  accessibilityLabel: string;\n}) => {\n  return (\n    <TouchableOpacity\n      onPress={() => Action()}\n      accessibilityLabel={accessibilityLabel}\n    >\n      <BlurView\n        intensity={80}\n        tint=\"light\"\n        style={[GlobalStyles.shadow, styles.buttonwrapper]}\n      >\n        <Text\n          style={[GlobalStyles.p1, GlobalStyles.textShadow, styles.buttonlabel]}\n        >\n          {title}\n        </Text>\n      </BlurView>\n    </TouchableOpacity>\n  );\n};\n\nconst styles = StyleSheet.create({\n  buttonwrapper: {\n    backgroundColor: \"pink\",\n    margin: Environment.standardPadding,\n    borderRadius: Environment.smallPadding,\n  },\n  buttonlabel: {\n    textAlign: \"center\",\n    color: Colors.Primary,\n    margin: Environment.smallPadding,\n  },\n});\n\nexport default BlurViewButton;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport {\n  View,\n  Text,\n  Button,\n  StyleSheet,\n  ScrollView,\n  ImageBackground,\n  Image,\n  TouchableOpacity,\n  useWindowDimensions,\n  FlatList,\n} from \"react-native\";\nimport { BlurView } from \"expo-blur\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Menu } from \"react-native-feather\";\nimport MobileOptionsModal from \"../resources/components/MobileOptionsModal\";\nimport NavButtonBlock from \"../resources/components/NavButtonBlock\";\nimport { Colors, Environment, GlobalStyles } from \"../resources/project\";\nimport { DispatchType, RootStateType } from \"../redux/store\";\nimport NavBar from \"../resources/components/NavBar\";\nimport backgroundContent from \"../resources/backgroundContent\";\nimport { BackgroundContentObject } from \"../resources/backgroundContent\";\nimport { setNavOptionsActive } from \"../redux/general\";\nimport BlurViewButton from \"../resources/components/BlurViewButton\";\n\nexport interface WindowDimensionsType {\n  height: number;\n  width: number;\n  scale: number;\n  fontScale: number;\n}\n\ninterface UpdateIndexProps {\n  contentIndex: number;\n  setContentIndex: Function;\n  backgroundContent: BackgroundContentObject[];\n}\n\ninterface LandingMainProps {\n  navigation: any;\n  route: any;\n}\n\nconst LandingMain = ({ navigation, route }: LandingMainProps) => {\n  const [index, setIndex] = useState(0);\n\n  const dispatch = useDispatch();\n\n  const flatListRef = useRef<FlatList<any>>(null);\n\n  const ChangeIndex = (previousIndex: number) => {\n    if (typeof backgroundContent[previousIndex + 1] === \"undefined\") {\n      return 0;\n    } else {\n      return previousIndex + 1;\n    }\n  };\n\n  flatListRef.current?.scrollToIndex({ animated: true, index });\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setIndex(ChangeIndex);\n    }, 5000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const windowDimensions = useWindowDimensions();\n\n  interface ItemObject {\n    item: BackgroundContentObject;\n  }\n\n  const renderItem = ({ item }: ItemObject) => {\n    return (\n      <Image\n        source={{ uri: item.address }}\n        style={{\n          width: windowDimensions.width,\n          height: windowDimensions.height,\n        }}\n      />\n    );\n  };\n\n  const GetItemLayout = (data: any, index: number) => {\n    return {\n      length: windowDimensions.height,\n      offset: windowDimensions.height * index,\n      index,\n    };\n  };\n\n  return (\n    <View style={styles.container}>\n      <FlatList\n        data={backgroundContent}\n        renderItem={renderItem}\n        ref={flatListRef}\n        // initialScrollIndex={2}\n        scrollEnabled={true}\n        keyExtractor={(item) => item.address}\n        showsVerticalScrollIndicator={false}\n        style={[\n          styles.flatliststyle,\n          {\n            width: windowDimensions.width,\n            height: windowDimensions.height,\n          },\n        ]}\n        getItemLayout={GetItemLayout}\n      />\n      <View style={styles.paddingwrapper}>\n        <NavBar\n          windowDimensions={windowDimensions}\n          dispatch={dispatch}\n          origin={\"Home\"}\n          navigation={navigation}\n        />\n\n        <View style={styles.headerwrapper}>\n          <Text\n            style={[GlobalStyles.h1, GlobalStyles.textShadow, styles.header]}\n          >\n            Save forever, share anywhere.\n          </Text>\n          <View />\n          <View>\n            <Text style={[GlobalStyles.h2, styles.subheader]}>Now in Beta</Text>\n            <BlurViewButton\n              Action={() => window.open(\"https://discord.gg/jkRsESdga4\")}\n              title={\"Join our Discord\"}\n              accessibilityLabel={\"https://discord.gg/jkRsESdga4\"}\n            />\n          </View>\n        </View>\n      </View>\n      <MobileOptionsModal origin={\"Home\"} navigation={navigation} />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.Primary,\n  },\n  flatliststyle: {\n    flex: 1,\n    position: \"absolute\",\n  },\n  paddingwrapper: {\n    height: \"100%\",\n    padding: \"2%\",\n  },\n  headerwrapper: {\n    flex: 1,\n    justifyContent: \"space-evenly\",\n    alignItems: \"center\",\n  },\n  header: {\n    textAlign: \"center\",\n    color: Colors.AccentOn,\n  },\n  subheader: {\n    color: Colors.AccentOn,\n    textAlign: \"center\",\n  },\n});\n\nexport default LandingMain;\n","import {\n  StyleSheet,\n  View,\n  Text,\n  useWindowDimensions,\n  Image,\n} from \"react-native\";\nimport { useDispatch } from \"react-redux\";\nimport BlurViewButton from \"../resources/components/BlurViewButton\";\nimport MobileOptionsModal from \"../resources/components/MobileOptionsModal\";\nimport NavBar from \"../resources/components/NavBar\";\nimport * as Linking from \"expo-linking\";\nimport { Environment, Colors, GlobalStyles } from \"../resources/project\";\n\ninterface ContactPropTypes {\n  navigation: any;\n}\n//\n\nconst Contact = ({ navigation }: ContactPropTypes) => {\n  const dispatch = useDispatch();\n  const windowDimensions = useWindowDimensions();\n\n  return (\n    <View style={styles.container}>\n      <View\n        style={[\n          styles.backgroundwrapper,\n          { height: windowDimensions.height, width: windowDimensions.width },\n        ]}\n      >\n        <Image\n          source={{\n            uri: \"https://mobile965f75596afb4ca68a1e637998665f92161112-production.s3.amazonaws.com/public/CompanyStock/LandingPage/LP-ContactHeader2.png\",\n          }}\n          resizeMode={\"cover\"}\n          style={{\n            height: windowDimensions.width * 0.5,\n            width: windowDimensions.width,\n          }}\n          // Styling above only works for an image with a 2:1 aspect ratio\n        />\n      </View>\n      <View style={styles.paddingwrapper}>\n        <NavBar\n          windowDimensions={windowDimensions}\n          dispatch={dispatch}\n          origin={\"Contact\"}\n          navigation={navigation}\n        />\n        <View style={styles.headerwrapper}>\n          <Text\n            style={[GlobalStyles.h1, GlobalStyles.textShadow, styles.header]}\n          >\n            Let's talk\n          </Text>\n          <BlurViewButton\n            Action={() => Linking.openURL(\"mailto:admin@render.game\")}\n            title={\"Send us an email\"}\n            accessibilityLabel={\"admin@render.game\"}\n          />\n        </View>\n      </View>\n      <MobileOptionsModal navigation={navigation} origin={\"Contact\"} />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.Secondary,\n  },\n  backgroundwrapper: {\n    position: \"absolute\",\n    alignItems: \"center\",\n  },\n  paddingwrapper: {\n    height: \"100%\",\n    padding: \"2%\",\n  },\n  headerwrapper: {\n    alignItems: \"center\",\n    flex: 1,\n    justifyContent: \"center\",\n  },\n  header: {\n    textAlign: \"center\",\n    color: Colors.AccentOn,\n    marginBottom: Environment.standardPadding,\n  },\n});\n\nexport default Contact;\n","import React, { useState } from \"react\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport LandingMain from \"./pages/LandingMain\";\nimport Contact from \"./pages/Contact\";\n\ntype RootStackParamList = {\n  LandingMain: undefined;\n  Dump: undefined;\n  Contact: undefined;\n};\n\nconst Stack = createNativeStackNavigator<RootStackParamList>();\n\nconst PageStack = () => {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n      }}\n      initialRouteName={\"LandingMain\"}\n    >\n      <Stack.Screen\n        name=\"LandingMain\"\n        component={LandingMain}\n        options={{ animation: \"fade\", title: \"Render\" }}\n      />\n      <Stack.Screen\n        name=\"Contact\"\n        component={Contact}\n        options={{ animation: \"fade\", title: \"Render • Contact\" }}\n      />\n    </Stack.Navigator>\n  );\n};\n\nexport default PageStack;\n","import { combineReducers, configureStore } from \"@reduxjs/toolkit\";\nimport general from \"./general\";\n\nconst reducer = combineReducers({\n  general,\n});\n\nconst store = configureStore({\n  reducer,\n});\n\nexport default store;\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootStateType = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type DispatchType = typeof store.dispatch;\n","import { StatusBar } from \"expo-status-bar\";\nimport { StyleSheet, Text, View, useWindowDimensions } from \"react-native\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport PageStack from \"./src/PageStack\";\nimport AppLoading from \"expo-app-loading\";\nimport store from \"./src/redux/store\";\nimport { Provider } from \"react-redux\";\nimport {\n  useFonts,\n  Inter_400Regular,\n  Inter_500Medium,\n  Inter_600SemiBold,\n} from \"@expo-google-fonts/inter\";\n\nconst App = () => {\n  let [fontsLoaded] = useFonts({\n    Inter_400Regular,\n    Inter_500Medium,\n    Inter_600SemiBold,\n  });\n\n  if (!fontsLoaded) {\n    return <AppLoading />;\n  } else {\n    return (\n      <Provider store={store}>\n        <NavigationContainer>\n          <PageStack />\n        </NavigationContainer>\n      </Provider>\n    );\n  }\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n});\n\nexport default App;\n"],"sourceRoot":""}